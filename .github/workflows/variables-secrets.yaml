# name: Exploring variables

# on: push

# ###################### environment variables at the step level ##################
# jobs:
#     docker:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker Build
#               env:
#                 CONTAINER_REGISTRY: docker.io
#                 DOCKER_USERNAME: dsamist
#                 IMAGE_NAME: github-actions-nginx
#               run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#             - name: Docker login
#               env: 
#                 DOCKER_PASSWORD: passworddummycharacter
#                 DOCKER_USERNAME: dsamist
#               run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

#             - name: Docker publish
#               env:
#                 CONTAINER_REGISTRY: docker.io
#                 DOCKER_USERNAME: dsamist
#                 IMAGE_NAME: github-actions-nginx
#               run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#     deploy:
#         needs: docker
#         runs-on: ubuntu-latest
#         steps:
#             - name: Deploy docker image
#               env:
#                 CONTAINER_REGISTRY: docker.io
#                 DOCKER_USERNAME: dsamist
#                 IMAGE_NAME: github-actions-nginx
#               run: echo docker run -dp 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest 



# #notice from the above that env of same type are defined at steps level, this is not good practice to have repetition in a sw, hence, env can be defined at the job level
# #any env defined at the job level will be accessible to all the steps within that job
# ################### env at the step level #####################

# jobs:
#     docker:
#         env:
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: dsamist
#             IMAGE_NAME: github-actions-nginx
#             DOCKER_PASSWORD: passworddummycharacter

#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker Build
#               run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#             - name: Docker login
#               run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

#             - name: Docker publish
#               run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#     deploy:
#         env:
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: dsamist
#             IMAGE_NAME: github-actions-nginx
#         needs: docker
#         runs-on: ubuntu-latest
#         steps:
#             - name: Deploy docker image
#               run: echo docker run -dp 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest 


# ###as seen in the env at the job level above, we also see that same env are repeated in the different jobs. so, one way to also stop these repitition is to define env at the workflow
# ###level


name: Exploring variables

#on: push    #enable this to allow a push event trigger the workflow
# on:        #enable this to allow a cro schedule trigger the workflow. Remember to modify the cron value as required
#   schedule:
#     - cron: "*/1 * * * *"

on:     #use this if u want a UI that allows u to manually trigger the workflow
  workflow_dispatch:

env:
    CONTAINER_REGISTRY: docker.io
    DOCKER_USERNAME: dsamist
    IMAGE_NAME: github-actions-nginx
    DOCKER_PASSWORD: passworddummycharacter


#another way to refer to the variables in the body of the workflow is to call it as $ {{env.VARIABLE_NAME}} e.g ${{env.DOCKER_USERNAME}}
jobs:
    docker:
        runs-on: ubuntu-latest
        steps:
            - name: Docker Build
              run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

            - name: Docker login
              run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

            - name: Docker publish
              run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

    deploy:
        needs: docker
        concurrency:     #what concurrency does it to ensure that only one workflow is executed at a time when a job is still running. #this means that a new triggere should not initiate the execution of a new workflow
          group: production-deployment
          cancel-in-progress: true
        runs-on: ubuntu-latest
        steps:
            - name: Deploy docker image
              run: | 
                echo docker run -dp 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest 
                sleep 600


              #the variables and secrets can also be stored in the settings of github etiher at a repository level or organnization level
              #setting ---> secrets ---> Actions. And it can be referenced as $ {{secrets.SECRETNAME}} while variables can be referenced as ${{vars.VARIABLE_NAME}}
              #these are applicables to secrets and variables stored at the settings of the repo and org level.



